//
//  main.cpp
//  SimpleWindow
//
//  Created by Silencer on 10/31/13.
//  Copyright (c) 2013 0Silencer. All rights reserved.
//

#include <iostream>

#ifdef MacOSX
	#include "LibGairP.h"
#else
	#include "LibGairP\LibGairP.h"
#endif

vector<Light> lightSources;
vector<DrawableObject*> objects;
Camera camera;
RayTracer rayTracer;


void init () {
    glClearColor(1, 1, 1, 1);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_SMOOTH);
    glShadeModel(GL_SMOOTH);
}

void reshape(int w, int h) {
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60,w/h,1,500);
    
    gluLookAt(camera.eyePos.x(), camera.eyePos.y() , camera.eyePos.z(), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 );
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void redraw() {
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glPushMatrix();
    
    rayTracer.render(objects, camera, lightSources);
    
    glPopMatrix();
    glutSwapBuffers();
}

void createObjects () {
    camera = Camera(600, 800, 600);
    
    Vector4D ambient = Vector4D(0.05, 0.05, 0.05, 1.0);
    Vector4D diffuse = Vector4D(1, 1, 1, 1.0 );
    Vector4D specular = Vector4D(0.5, 0.7, 0.3, 1.0 );
    
    Light light = Light(Material(ambient,diffuse,specular,0.0),Vector3D(70,0,-300), 1,0,0);
    
    lightSources.push_back(light);
    
    Rectangle * rect = new Rectangle(Vector3D(-camera.width,-camera.height,camera.width),
                                     Vector3D(-camera.width,camera.height,camera.width),
                                     Vector3D(camera.width,camera.height,camera.width),
                                     Vector3D(camera.width,-camera.height,camera.width));
    rect->material = GoldMaterial;
    objects.push_back(rect);

    rect = new Rectangle(Vector3D(-camera.width,-camera.height / 2,0),
                         Vector3D(-camera.width,-camera.height / 2,camera.width),
                         Vector3D(camera.width,-camera.height / 2,camera.width),
                         Vector3D(camera.width,-camera.height / 2,0));
    rect->material = GoldMaterial;
    objects.push_back(rect);
    
    rect = new Rectangle(Vector3D(camera.width,camera.height / 2,0),
                         Vector3D(camera.width,camera.height / 2,camera.width),
                         Vector3D(-camera.width,camera.height / 2,camera.width),
                         Vector3D(-camera.width,camera.height / 2,0));
    rect->material = SilverMaterial;
    objects.push_back(rect);
    
    
    rect = new Rectangle(Vector3D(-camera.width / 2,-camera.height / 2,0),
                         Vector3D(-camera.width / 2,camera.height / 2,0),
                         Vector3D(-camera.width / 2,camera.height / 2,camera.width),
                         Vector3D(-camera.width / 2,-camera.height / 2,camera.width));
    rect->material = PewterMaterial;
    rect->reflection = 0.9;
    objects.push_back(rect);
    
    rect = new Rectangle(
                         Vector3D(camera.width / 2,-camera.height / 2,camera.width),
                         Vector3D(camera.width / 2,camera.height / 2,camera.width),
                         Vector3D(camera.width / 2,camera.height / 2,0),
                         Vector3D(camera.width / 2,-camera.height / 2,0)
                         );
    rect->material = CopperMaterial;
    rect->reflection = 0.5;
    objects.push_back(rect);
        
    Sphere * s = new Sphere(32, 5, 5, RedColor, CopperMaterial);
    s->center = Vector3D(0,-camera.height / 2 + 90,90);
    objects.push_back(s);
    
    s = new Sphere(30, 5, 5, BlueColor, SilverMaterial);
    s->center = Vector3D(-90,0,-40);
    objects.push_back(s);
    
    s = new Sphere(20, 5, 5, BlueColor, GoldMaterial);
    s->center = Vector3D(camera.width / 2 - 40,80,camera.height / 2 -80);
    objects.push_back(s);

    s = new Sphere(10, 5, 5, YellowColor, PewterMaterial);
    s->center = Vector3D(80,0,-20);
    objects.push_back(s);

    rayTracer = RayTracer(camera.width, camera.height);
}

void handleKeyPress(unsigned char c, int x, int y) {
    if (c == 'u') {
        lightSources[0].position.x() += 10;
    }
    
    if (c == 'i') {
        lightSources[0].position.x() -= 10;
    }
    
    if (c == 'o') {
        lightSources[0].position.y() += 10;
    }
    
    if (c == 'p') {
        lightSources[0].position.y() -= 10;
    }
    if (c == 't') {
        lightSources[0].position.z() += 10;
    }
    
    if (c == 'y') {
        lightSources[0].position.z() -= 10;
    }
    
    if (c == 'z') {
        camera.eyePos.x() += 10;
    }
    
    if (c == 'x') {
        camera.eyePos.x() -= 10;
    }
    
    if (c == 'c') {
        camera.eyePos.y() += 10;
    }
    
    if (c == 'v') {
        camera.eyePos.y() -= 10;
    }
    if (c == 'b') {
        camera.eyePos.z() += 10;
    }
    
    if (c == 'n') {
        camera.eyePos.z() -= 10;
    }
    if (c == 27)
        exit(0);
    
    camera.eyePos.printDescription();
    lightSources[0].position.printDescription();
}

int main(int argc, char * argv[]) {
    createObjects();
    
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_DEPTH);
    glutInitWindowSize(camera.width, camera.height);
    glutInitWindowPosition(400, 400);
    glutCreateWindow("RayTracer Example");
    
    init();
    glutDisplayFunc(redraw);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(handleKeyPress);
    glutIdleFunc(redraw);
    glutMainLoop();
    
    return 0;
}

